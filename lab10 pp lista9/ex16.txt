#include <stdio.h>
#include <stdlib.h>

int main() {
    int i, j, n, m;
    int **matriz;
    int **matrizTransposta;

    printf("Entre com o numero de linhas da matriz: ");
    scanf("%d", &n);
    printf("Entre com o numero de colunas da matriz: ");
    scanf("%d", &m);

    // alocando memória dinamicamente para a matriz
    matriz = (int**) malloc(n * sizeof(int*));
    for (i = 0; i < n; i++) {
        matriz[i] = (int*) malloc(m * sizeof(int));
    }

    // alocando memória dinamicamente para a matriz transposta
    matrizTransposta = (int**) malloc(m * sizeof(int*));
    for (i = 0; i < m; i++) {
        matrizTransposta[i] = (int*) malloc(n * sizeof(int));
    }

    // lendo valores da matriz
    printf("Entre com os valores da matriz:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &matriz[i][j]);
        }
    }

    // construindo a matriz transposta
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            matrizTransposta[j][i] = matriz[i][j];
        }
    }

    // mostrando a matriz original
    printf("Matriz Original:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    // mostrando a matriz transposta
    printf("\nMatriz Transposta:\n");
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            printf("%d ", matrizTransposta[i][j]);
        }
        printf("\n");
    }

    // liberando memória alocada dinamicamente
    for (i = 0; i < n; i++) {
        free(matriz[i]);
    }
    free(matriz);

    for (i = 0; i < m; i++) {
        free(matrizTransposta[i]);
    }
    free(matrizTransposta);
    return 0;
}